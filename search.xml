<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Solr入门教程</title>
    <url>/2021/02/07/Solr%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-Solr基础介绍"><a href="#1-Solr基础介绍" class="headerlink" title="1 Solr基础介绍"></a>1 Solr基础介绍</h1><h2 id="1-1-什么是Solr"><a href="#1-1-什么是Solr" class="headerlink" title="1.1 什么是Solr"></a>1.1 什么是Solr</h2><p>Solr是Apache开源的、基于Lucene的Java Api的封装,是一款成熟稳定的搜索引擎。</p>
<h2 id="1-2-Solr的优缺点"><a href="#1-2-Solr的优缺点" class="headerlink" title="1.2 Solr的优缺点"></a>1.2 Solr的优缺点</h2><p>优点: </p>
<ol>
<li><p>大量的用户群体与成熟的社区</p>
</li>
<li><p>支持多种格式索引,例如HTML、CSV、JSON、XML等</p>
</li>
<li><p>诞生于与2004年,多年的沉淀使得Solr成熟、稳定</p>
</li>
<li><p><strong>如果不考虑建索引的同时进行查询,查询速度更快</strong>,像我目前接手的法律查询软件,法律的录入不是十分频繁,那么用Solr就会比较合适</p>
</li>
</ol>
<p>缺点:</p>
<ol>
<li>在建立索引时,搜索效率不高,例如淘宝热卖那种需要实时更新索引的项目,Solr就显得有点力不从心了</li>
</ol>
<h2 id="1-3-使用版本"><a href="#1-3-使用版本" class="headerlink" title="1.3 使用版本"></a>1.3 使用版本</h2><ol>
<li>JDK-1.8</li>
<li>Solr-7.7.3(未使用最新版是因为公司用的不是最新版,然后核心知识都大同小异,后续会再看8.x有什么更新)</li>
<li>ik分词器-7.x</li>
</ol>
<h2 id="1-4-安装"><a href="#1-4-安装" class="headerlink" title="1.4 安装"></a>1.4 安装</h2><ol>
<li><p>下载安装包 <a href="https://mirrors.bfsu.edu.cn/apache/lucene/solr/7.7.3/solr-7.7.3.tgz"><strong>https://mirrors.bfsu.edu.cn/apache/lucene/solr/7.7.3/solr-7.7.3.tgz</strong></a></p>
</li>
<li><p>到安装路径下解压 tar -zxvf solr-7.7.3.tgz(tgz相当于是tar.gz)</p>
</li>
</ol>
<h2 id="1-5-目录布局"><a href="#1-5-目录布局" class="headerlink" title="1.5 目录布局"></a>1.5 目录布局</h2><table>
<thead>
<tr>
<th align="center">目录</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bin</td>
<td align="center">包含启动等一些重要脚本</td>
</tr>
<tr>
<td align="center">contrib</td>
<td align="center">Solr的附加插件</td>
</tr>
<tr>
<td align="center">dist</td>
<td align="center">Solr的jar包</td>
</tr>
<tr>
<td align="center">docs</td>
<td align="center">Solr的在线文档</td>
</tr>
<tr>
<td align="center">example</td>
<td align="center">演示案例</td>
</tr>
<tr>
<td align="center">licenses</td>
<td align="center">Solr使用的第三方库的许可证</td>
</tr>
<tr>
<td align="center">server</td>
<td align="center">Solr的核心应用,包含管理UI界面等</td>
</tr>
</tbody></table>
<h2 id="1-6-常用命令"><a href="#1-6-常用命令" class="headerlink" title="1.6 常用命令"></a>1.6 常用命令</h2><p> bin/solr start  启动(macOS与Linux均以下述方式启动,Windows需要在加个.cmd如:<strong>bin/solr.cmd start</strong>)</p>
<p>bin/solr stop 关闭</p>
<p>bin/solr restart 重启</p>
<p>bin/solr status 查看状态</p>
<p>Solr有单机运行与集群运行两种方式,本文主要以单机运行为主了,默认启动端口为8983,若想指定端口可以在后面加上 -p 参数,如 </p>
<ul>
<li>bin/solr start -p 端口号 </li>
<li>bin/solr restart  -p 端口号 </li>
</ul>
<p>此时可以在浏览器输入 <a href="http://localhost:8983/">http://localhost:8983/</a> 来打开admin UI界面:</p>
<p><img src="https://gitee.com/bean-chan/images/raw/master/img/20210207140119.png" alt="WechatIMG3302"></p>
<h1 id="2-core配置"><a href="#2-core配置" class="headerlink" title="2 core配置"></a>2 core配置</h1><h2 id="2-1-什么是core"><a href="#2-1-什么是core" class="headerlink" title="2.1 什么是core"></a>2.1 什么是core</h2><p>是一个Lucene实例,其中包含Solr所有的配置文件,我们需要创建一个core来完成索引与分析等操作</p>
<p>一个Solr可以有多个core,如果需要core之间也是可以互相通信的</p>
<h2 id="2-2-core的创建"><a href="#2-2-core的创建" class="headerlink" title="2.2 core的创建"></a>2.2 core的创建</h2><ol>
<li><p>create命令创建</p>
<p> ./solr create -c  new_core1</p>
</li>
<li><p>admin UI上直接创建</p>
<p>   a. 此步执行之前,需要先将solr的默认配置文件夹复制到solr/server/solr/下,并重命名(下例中取名为new_core2),参考命令: cp -r ~/Library/solr-7.7.3/server/solr/configsets/_default/conf/  ~/Library/solr-7.7.3/server/solr/new_core2/<br>   b. 重启<br>   c. <img src="https://gitee.com/bean-chan/images/raw/master/img/20210207155125.png" alt="image-20210207155125070"></p>
</li>
</ol>
<p>注意项:</p>
<ol>
<li>用第一种方法创建,会自动在server/solr下创建一个名为new_core1的core文件夹,里面有着所需的配置文件(server/solr也称solr_home)</li>
<li>第二种方式创建相当于我们手动创建了core文件夹</li>
<li>core还有其他创建方式,但这两种比较常见</li>
</ol>
<h2 id="2-3-core的删除"><a href="#2-3-core的删除" class="headerlink" title="2.3 core的删除"></a>2.3 core的删除</h2><p>​    ./solr delete -c my_core</p>
<h1 id="3-schema配置"><a href="#3-schema配置" class="headerlink" title="3 schema配置"></a>3 schema配置</h1><h2 id="3-1-什么是schema"><a href="#3-1-什么是schema" class="headerlink" title="3.1 什么是schema"></a>3.1 什么是schema</h2><p>在讲schema之前需要先了解一个概念   <strong>index(索引)</strong></p>
<p>这里的索引和数据库中的索引不同,可以简单理解为Solr中的一张表,与Elasticsearch中的索引概念类似,举个例子:</p>
<p>我有学生表和课程表,我有一条很频繁的查询是某某学生某某课程考了多少分,那我就需要从数据库把这两张表的内容查询出来处理完后再传回客户端,而solr会把这两张表中需要的字段提取出来,存放到solr中去,而存放的数据结构就是索引,这相当于是数据库里的一张表</p>
<p>而schema就是Solr如何建立索引的说明书,例如字段的数据类型以及分词方式等</p>
<h2 id="3-2-schema配置"><a href="#3-2-schema配置" class="headerlink" title="3.2 schema配置"></a>3.2 schema配置</h2><p>在Solr5.5之前的配置文件叫schema.xml,这些需要手动配置,密密麻麻的XML看着还挺头疼的,之后出现了的配置文件叫做managed-schema,他的配置方式是使用schemaAPI来实时配置,并且配置之后无须重启即可生效,更加适合生产环境,也更好操作</p>
<p>常见的配置内容:</p>
<ol>
<li><p>field:  相当于Java类的属性字段,可以给他配上其他属性,比如是否需要显示,是否可以用做索引字段等,有明确的定义的普通字段<br> <img src="https://gitee.com/bean-chan/images/raw/master/img/20210207171043.png" alt="image-20210207171043365"><br> a. name: 查询时字段<br> b. type: 字段类型<br> c. indexed: 是否为索引字段<br> d. stored: 是否存储<br> e. multiValued: 是否允许多值</p>
</li>
<li><p>dynamicField: 与field类似,是未明确定义名字的字段,常用属性与field了类似</p>
<p> <img src="https://gitee.com/bean-chan/images/raw/master/img/20210207172527.png" alt="image-20210207172527096"></p>
</li>
<li><p>copyField: </p>
<ul>
<li>可以将field字段拷贝到其他字段</li>
<li>可以将dynamicField字段拷贝到其他字段</li>
<li>可以将多个field字段拷贝到多值字段</li>
<li>可以将多个dynamicField字段拷贝到多值字段</li>
<li><img src="https://gitee.com/bean-chan/images/raw/master/img/20210207172637.png" alt="image-20210207172637955"></li>
</ul>
</li>
<li><p>fieldType: 一般用来定义分词器,然后让field/dynamicField通过type引用</p>
<p> <img src="https://gitee.com/bean-chan/images/raw/master/img/20210207172800.png" alt="image-20210207172800274"></p>
</li>
<li><p>analyzer: fieldType的子属性,常用于设置分词器</p>
</li>
</ol>
<h2 id="3-3-ik分词器配置"><a href="#3-3-ik分词器配置" class="headerlink" title="3.3 ik分词器配置"></a>3.3 ik分词器配置</h2><p>步骤:</p>
<ol>
<li><p>下载jar包:<a href="https://search.maven.org/search?q=com.github.magese">https://search.maven.org/search?q=com.github.magese</a>    <img src="https://gitee.com/bean-chan/images/raw/master/img/20210219085443.png" alt="image-20210219085443741"></p>
</li>
<li><p>把jar包放置到(以我的为例)solr-7.7.3/server/solr-webapp/webapp/WEB-INF/lib下</p>
</li>
<li><p>到solr-7.7.3/server/solr/new_core/managed-schema下最底下粘贴以下内容:</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ik分词器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;text_ik&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;false&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;</span> <span class="attr">useSmart</span>=<span class="string">&quot;true&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;ik.conf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启Solr</p>
</li>
<li><p>测试分词器    <img src="https://gitee.com/bean-chan/images/raw/master/img/20210219090639.png" alt="image-20210219090639925"></p>
<p>Field Value(Index)与Field Value(Query)是Solr在索引时与在查询时会怎么处理数据,可以根据这两个来帮助设计分析器、分词器和过滤器(本文采用了ik分词器,上述三者ik分词器已经自己设计好了,关于这三者具体内容见下文)</p>
</li>
</ol>
<h1 id="4-分析器、分词器、过滤器"><a href="#4-分析器、分词器、过滤器" class="headerlink" title="4 分析器、分词器、过滤器"></a>4 分析器、分词器、过滤器</h1><p>Solr主要通过分析器(Analyzer)、标记器(Tokenizers)、过滤器(Filter)来分解和处理文本。</p>
<p>在介绍之前,先讲述一个概念文档(Document),之前说index相当于数据库里的一张表,而文档就可以理解为表里的一条数据。</p>
<h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>当对一个文档进行索引时,每个field的数据都会经过分析,分词过滤等操作,例如,将一句话分词若干个单词和词组,然后去掉空格与语气词等多余的词以及进行同义词替换等,例如:</p>
<p>what a beautiful girl,在这里what和a这样的词以及空格会被去掉,最终的处理结果为beautiful和girl或者是beautiful girl</p>
<p>除了索引会做这些工作,查询时也会做这些工作,并且为了保证索引与查询可以正确匹配,二者的处理规则往往也是相同的,例如:</p>
<p>ABCD索引分词为AB CD,查询时分词为A BCD,这样匹配的结果就为0</p>
<p>analyzer包含着两个部分,Tokenizers与Filter。Tokenizers就是将句子拆分成单个词,而Filter就是对分词的结果中比如中文里的”的”、”呀”、”啊”,英文里的”am”、”is”、”are”这类对句子主体意思关系不大的词去掉</p>
<p>solr有自带了一些分词器,如果你需要使用中文分词器就需要自己配置,参考3.3</p>
<h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><p>analyzer为fieldType下的一个子元素,主要作用是检查字段的文本并生成令牌流</p>
<p>最简单的使用方式如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;nametext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.lucene.analysis.core.WhitespaceAnalyzer&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中analyzer通过一个全限定Java类名引入,且命名的类必须继承自org.apache.lucene.analysis.Analyzer</p>
<p>对于简单的文章,这样一个分析器类就足够完成任务,但是通常情况下是需要更为复杂的分析</p>
<p>Solr提供了大量的Tokenizers与Filter来协助分析,例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;nametext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;solr.StandardTokenizerFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.StandardFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.StopFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.EnglishPorterFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>org.apache.solr.analysis 包中的类可以在这里用简写的 solr. 前缀来代替</p>
<p>上述中,analyzer未使用指定的分析器类,而用许多类组合到一起,成为该字段的分析器,任何使用”nametext”fieldType字段进行索引或查询时,都会经过从StandardTokenizerFactory到EnglishPorterFilterFactory的过滤</p>
<p>分析发生在两种情况下:分别是索引时与查询时</p>
<p>在索引时:当一个字段被创建时，分析得到的令牌流将被添加到一个索引中，并为该字段定义一组术语（包括位置、大小等）。</p>
<p>在查询时:分析正在搜索的值，并将结果的条件与存储在字段索引中的条件进行匹配。</p>
<p>如果想要在不同阶段使用不同的分析器,可以指定type属性:如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">&quot;nametext&quot;</span> <span class="attr">class</span>=<span class="string">&quot;solr.TextField&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;solr.StandardTokenizerFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.KeepWordFilterFactory&quot;</span> <span class="attr">words</span>=<span class="string">&quot;keepwords.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.SynonymFilterFactory&quot;</span> <span class="attr">synonyms</span>=<span class="string">&quot;syns.txt&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">&quot;query&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">&quot;solr.StandardTokenizerFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;solr.LowerCaseFilterFactory&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在索引时,文本被标记化,并设置为小写,未列在keepwords.txt中的会被丢弃,保留下来的会根据syns.txt进行同义词替换</p>
<p>在查询时,就只是将文本标记后设置为小写</p>
<h1 id="5-Solr的使用"><a href="#5-Solr的使用" class="headerlink" title="5 Solr的使用"></a>5 Solr的使用</h1><h2 id="5-1-根据文件导入数据"><a href="#5-1-根据文件导入数据" class="headerlink" title="5.1 根据文件导入数据"></a>5.1 根据文件导入数据</h2><p>Solr可以导入多种格式的文件来作为index,在solr-7.7.3/example/exampledocs中有各个格式的测试案例,本文随机采用一种演示</p>
<p>可以通过bin目录下的post命令导入index</p>
<p>输入 bin/post -h 可查看具体使用方式</p>
<p>示例: bin/post -c 导入的核心名 导入的文件(可多个)</p>
<p>下面演示一下往new_core里导入book.csv与book.json文件:</p>
<ol>
<li>bin/post -c new_core example/exampledocs/books.csv example/exampledocs/books.json</li>
<li>查看演示数据<br> <img src="https://gitee.com/bean-chan/images/raw/master/img/20210219095506.png" alt="image-20210219095506274"></li>
</ol>
<h2 id="5-2-添加-更新文档"><a href="#5-2-添加-更新文档" class="headerlink" title="5.2 添加/更新文档"></a>5.2 添加/更新文档</h2><p>添加/更新内容(根据是否有id判断为添加还是更新操作):    <img src="https://gitee.com/bean-chan/images/raw/master/img/20210219102710.png" alt="image-20210219102710466"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cat&quot;</span>:[<span class="string">&quot;book&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:[<span class="string">&quot;BeanChan is a handsome man&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>:[<span class="number">799</span>],</span><br><span class="line">  <span class="attr">&quot;inStock&quot;</span>:[<span class="literal">true</span>],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>:[<span class="string">&quot;BeanChan&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;series_t&quot;</span>:<span class="string">&quot;A man has a pretty face&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sequence_i&quot;</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;genre_s&quot;</span>:<span class="string">&quot;fantasy&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-3-删除文档"><a href="#5-3-删除文档" class="headerlink" title="5.3 删除文档"></a>5.3 删除文档</h2><p>需基于XML方式<img src="https://gitee.com/bean-chan/images/raw/master/img/20210220093542.png" alt="image-20210220093541899"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除所有索引--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">query</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commit</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据 id 进行删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commit</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-4-查询数据"><a href="#5-4-查询数据" class="headerlink" title="5.4 查询数据"></a>5.4 查询数据</h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">q</td>
<td align="center">主要查询参数</td>
</tr>
<tr>
<td align="center">fq</td>
<td align="center">过滤器查询参数</td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">起始页</td>
</tr>
<tr>
<td align="center">rows</td>
<td align="center">查询行数</td>
</tr>
<tr>
<td align="center">sort</td>
<td align="center">排序方式</td>
</tr>
<tr>
<td align="center">fl</td>
<td align="center">结果集字段列表</td>
</tr>
<tr>
<td align="center">wt</td>
<td align="center">展示格式(下图以csv格式展示)</td>
</tr>
</tbody></table>
<p>下图为例:<br><img src="https://gitee.com/bean-chan/images/raw/master/img/20210220101639.png" alt="image-20210220101639220"></p>
<h1 id="6-整合springboot"><a href="#6-整合springboot" class="headerlink" title="6 整合springboot"></a>6 整合springboot</h1><ol>
<li><p>引入pom依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-solr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置yml</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">solr:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">http://127.0.0.1:8983/solr</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置entity</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beanchan.cn.springbootdemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.beans.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.solr.core.mapping.SolrDocument;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> SolrEntity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChenBin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> 2021/2/20 2:00 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SolrDocument(collection = &quot;new_core&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Field</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置dao</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beanchan.cn.springbootdemo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.entity.SolrEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.solr.repository.SolrCrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> solaDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChenBin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> 2021/2/20 3:25 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SolrDao</span> <span class="keyword">extends</span> <span class="title">SolrCrudRepository</span>&lt;<span class="title">SolrEntity</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置service及其实现类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beanchan.cn.springbootdemo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.entity.SolrEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrServerException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@InterfaceName</span> ISolrService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChenBin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> 2021/2/20 3:33 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISolrService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">List&lt;SolrEntity&gt; <span class="title">quertList</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException, SolrServerException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beanchan.cn.springbootdemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.dao.SolrDao;</span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.entity.SolrEntity;</span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.service.ISolrService;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrServerException;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.response.QueryResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.common.SolrDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.common.SolrDocumentList;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ISolrServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChenBin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> 2021/2/20 3:34 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ISolrServiceImpl</span> <span class="keyword">implements</span> <span class="title">ISolrService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    SolrDao solrDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrEntity solrEntity = <span class="keyword">new</span> SolrEntity();</span><br><span class="line">        solrEntity.setId(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">        solrEntity.setName(<span class="string">&quot;阿姆斯特朗回旋加速喷气式阿姆斯特朗炮制作图纸&quot;</span>);</span><br><span class="line">        solrDao.save(solrEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SolrEntity solrEntity = <span class="keyword">new</span> SolrEntity();</span><br><span class="line">        solrEntity.setId(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">        solrEntity.setName(<span class="string">&quot;阿姆斯特朗回旋加速喷气式阿姆斯特朗炮使用手册&quot;</span>);</span><br><span class="line">        solrDao.save(solrEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        solrDao.deleteById(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SolrEntity&gt; <span class="title">quertList</span><span class="params">(String keyword)</span> <span class="keyword">throws</span> IOException, SolrServerException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SolrQuery query = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置查询条件</span></span><br><span class="line">        query.setQuery(<span class="string">&quot;name:阿姆斯特朗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照时间排序</span></span><br><span class="line">        <span class="comment">// query.addSort(&quot;create_time&quot;, SolrQuery.ORDER.desc);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始页</span></span><br><span class="line">        query.setStart(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//一页显示多少条</span></span><br><span class="line">        query.setRows(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启高亮</span></span><br><span class="line">        <span class="comment">//query.setHighlight(true);</span></span><br><span class="line">        <span class="comment">//设置高亮字段</span></span><br><span class="line">        <span class="comment">//query.addHighlightField(&quot;demoName&quot;);</span></span><br><span class="line">        <span class="comment">//前缀</span></span><br><span class="line">        <span class="comment">//query.setHighlightSimplePre(&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;);</span></span><br><span class="line">        <span class="comment">//后缀</span></span><br><span class="line">        <span class="comment">//query.setHighlightSimplePost(&quot;&lt;/font&gt;&quot;);</span></span><br><span class="line">        <span class="comment">//执行查找</span></span><br><span class="line">        QueryResponse response = solrClient.query(<span class="string">&quot;new_core&quot;</span>,query);</span><br><span class="line"></span><br><span class="line">        SolrDocumentList results = response.getResults();</span><br><span class="line">        <span class="comment">//获取查询到的数据总量</span></span><br><span class="line">        <span class="keyword">long</span> numFound = results.getNumFound();</span><br><span class="line">        <span class="keyword">if</span> (numFound &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果小于0，表示未查询到任何数据，返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;SolrEntity&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//遍历结果集</span></span><br><span class="line">            <span class="keyword">for</span> (SolrDocument doc : results) &#123;</span><br><span class="line">                <span class="comment">//得到每条数据的map集合</span></span><br><span class="line">                Map&lt;String, Object&gt; map = doc.getFieldValueMap();</span><br><span class="line">                <span class="comment">//添加到list</span></span><br><span class="line">                <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;KEY:&quot;</span> + key + <span class="string">&quot;,VALUE:&quot;</span> + map.get(key).toString());</span><br><span class="line">                &#125;</span><br><span class="line">                SolrEntity demo = <span class="keyword">new</span> SolrEntity();</span><br><span class="line">                demo.setId(map.get(<span class="string">&quot;id&quot;</span>).toString());</span><br><span class="line">                demo.setName(map.get(<span class="string">&quot;name&quot;</span>).toString());</span><br><span class="line">                list.add(demo);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置Controller</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> beanchan.cn.springbootdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.entity.SolrEntity;</span><br><span class="line"><span class="keyword">import</span> beanchan.cn.springbootdemo.service.ISolrService;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrServerException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> searchController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ChenBin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateDate</span> 2021/2/20 10:57 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ISolrService solrService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> flag</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        solrService.add();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        solrService.update();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        solrService.delete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;queryList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SolrEntity&gt; solrEntities = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            solrEntities = solrService.quertList(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | SolrServerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (solrEntities != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> solrEntities.toString();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;empty&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试还请自行实验,下图简单展示一下</p>
<p> <img src="https://gitee.com/bean-chan/images/raw/master/img/20210220164722.png" alt="image-20210220164722459"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins入门教程</title>
    <url>/2021/02/02/Jenkins%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-什么是Jenkins"><a href="#1-什么是Jenkins" class="headerlink" title="1. 什么是Jenkins"></a>1. 什么是Jenkins</h1><h2 id="1-1-我们为啥需要jenkins"><a href="#1-1-我们为啥需要jenkins" class="headerlink" title="1.1 我们为啥需要jenkins"></a>1.1 我们为啥需要jenkins</h2><p>在一次系统开发中,往往需要如下几步:</p>
<ol>
<li>写代码</li>
<li>代码提交</li>
<li>四处打听有没有人没提交代码</li>
<li>项目打包(通常是jar包和war包)</li>
<li>上传到Linux服务器上</li>
<li>如果项目正在运行,关闭它</li>
<li>启动刚刚部署的项目</li>
<li>如果有人突然举手说我代码好像有点问题!重复步骤1-7,可以说是相等的折磨人了</li>
</ol>
<p>这时有人就会问了,<strong>有没有那种可以自动打包部署的工具呢</strong>?</p>
<p><a href="https://imgchr.com/i/sz9gQ1"><img src="https://img-blog.csdnimg.cn/img_convert/80ef6c5703529b4af9c1ab9dc92f150a.png" alt="sz9gQ1.jpg"></a></p>
<blockquote>
<p>正确答案:<strong>Jenkins</strong></p>
</blockquote>
<p>Jenkins是一个基于Java构筑的一个<strong>持续集成</strong>工具,可以帮助用户更好地实现持续集成</p>
<a id="more"></a>

<h2 id="1-2-Jenkin实现原理"><a href="#1-2-Jenkin实现原理" class="headerlink" title="1.2. Jenkin实现原理"></a>1.2. Jenkin实现原理</h2><ol>
<li><p>程序员们提交代码</p>
</li>
<li><p>版本控制服务器(git、svm)整合代码库</p>
</li>
<li><p>版本控制服务器通知Jenkins自动化部署</p>
</li>
<li><p>Jenkins调用git/svn插件获取源码</p>
</li>
<li><p>Jenkins调用maven插件打包成war包或者是jar包</p>
</li>
<li><p>Jenkins调用命令将项目部署到服务器</p>
</li>
<li><p>使用人员:测试/前端</p>
</li>
</ol>
<hr>
<h1 id="2-Jenkins搭建"><a href="#2-Jenkins搭建" class="headerlink" title="2. Jenkins搭建"></a>2. Jenkins搭建</h1><h2 id="2-1-Jenkins环境搭建-以CentOS7-5为例"><a href="#2-1-Jenkins环境搭建-以CentOS7-5为例" class="headerlink" title="2.1. Jenkins环境搭建(以CentOS7.5为例)"></a>2.1. Jenkins环境搭建(以CentOS7.5为例)</h2><ol>
<li>jdk</li>
<li>maven/gradle</li>
<li>git/svm</li>
</ol>
<p>以上为部署java项目的基本环境,请先行搭建好</p>
<h2 id="2-2-安装Jenkins"><a href="#2-2-安装Jenkins" class="headerlink" title="2.2. 安装Jenkins"></a>2.2. 安装Jenkins</h2><ol>
<li>安装包下载,Jenkins官网下载较慢,这里提供国内下载地址:<a href="https://mirrors.aliyun.com/jenkins/war/latest/jenkins.war">Jenkins</a></li>
<li>在安装包根路径下输入:<br> <strong>nohup java -jar -      Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true  jenkins.war –httpPort=8080 &amp;</strong> <ul>
<li>nohup …………. &amp; 后台启动</li>
<li>Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true 为了关闭CSRF,Jenkins2.2版本之后无法关闭CSRF,会导致项目拉取失败</li>
<li>jenkins.war 下载下来的war包</li>
<li>–httpPort=8080 指定jenkins管理页面的端口</li>
</ul>
</li>
<li>安装结束后会有一个很长的初始密码,如果忘了可以在~/.jenkins/secrets/initialAdminPassword文件中查看</li>
<li>在浏览器输入 <a href="http://localhost:8080/">http://localhost:8080</a></li>
<li>输入密码后,建议点击安装推荐的插件,保证基本功能可用</li>
<li>安装完成后设置首个管理员用户和密码</li>
</ol>
<h2 id="2-3-Jenkins初始化配置"><a href="#2-3-Jenkins初始化配置" class="headerlink" title="2.3. Jenkins初始化配置"></a>2.3. Jenkins初始化配置</h2><h3 id="2-3-1-汉化插件-可选"><a href="#2-3-1-汉化插件-可选" class="headerlink" title="2.3.1. 汉化插件(可选)"></a>2.3.1. 汉化插件(可选)</h3><p>Linux安装完成后,第一次打开发现内部全都是英文的    <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7mh7zrqj31ov0u0tcf.jpg" alt="yVxkP1.png"></p>
<p>汉化步骤:</p>
<ol>
<li><p>点击Manage Jenkins</p>
</li>
<li><p>点击Mange Plugins</p>
</li>
<li><p>点击Advanced,设置Update Sites的URL为:<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a> 用国内镜像源安装插件速度会很快</p>
</li>
<li><p>插件安装(新老版本二选一) </p>
<ul>
<li><p>老版的安装<strong>Locale</strong>插件,随后依次点击Manage Jenkins -&gt; Configure System,找到Locale输入<strong>zh_CN</strong>,并在下面打钩</p>
</li>
<li><p>新版的安装Localization:Chinese(Simplified)插件即可(笔者自用,Jenkins版本2.277)</p>
</li>
</ul>
</li>
<li><p>拉到最下方点击save</p>
</li>
<li><p>重启( 推荐方式: <a href="http://localhost:8080/restart">http://localhost:8080/restart</a> )真的很省事</p>
</li>
</ol>
<h3 id="2-3-2-全局工具配置-系统管理底下"><a href="#2-3-2-全局工具配置-系统管理底下" class="headerlink" title="2.3.2. 全局工具配置(系统管理底下)"></a>2.3.2. 全局工具配置(系统管理底下)</h3><p>JDK、Git、Maven配置:</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7rj9camj31180g6405.jpg" alt="y9nACn.png"></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7o1qpej30o018ktb0.jpg" alt="ypAMdI.png"><br>注意项: </p>
<ol>
<li>如果没有git的配置项,先在插件里安装一下git插件,具体安装方式参照上面汉化步骤</li>
<li>是否自动安装自行考虑,网上看别人的建议是用自己的(自己的才是最好的)</li>
<li>记得拉到最底下点保存</li>
<li>换上你<strong>自己</strong>的目录配置项</li>
<li>记得把Maven的settings.xml里的mrror换成阿里源</li>
<li>上图git记得配置成git<strong>可执行文件</strong>的全路径</li>
</ol>
<h3 id="2-3-3-安装远程服务器插件以及其余插件"><a href="#2-3-3-安装远程服务器插件以及其余插件" class="headerlink" title="2.3.3. 安装远程服务器插件以及其余插件"></a>2.3.3. 安装远程服务器插件以及其余插件</h3><p>一共需要安装三个插件(安装步骤参考上面汉化步骤):</p>
<ol>
<li>Publish Over SSH 用于连接远程服务器</li>
<li>Deploy to container 用于把打包的应用发布到远程服务器</li>
<li>Maven Integration 用于构建Maven项目</li>
</ol>
<h2 id="2-4-配置连接远程服务器的SSH"><a href="#2-4-配置连接远程服务器的SSH" class="headerlink" title="2.4. 配置连接远程服务器的SSH"></a>2.4. 配置连接远程服务器的SSH</h2><ol>
<li>依次点击 系统管理 -&gt; 系统配置</li>
<li>拉到最底下找到Publish over SSH,参考下图填写完毕<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7kjjz6j30dk0mxaaz.jpg" alt="在这里插入图片描述"></li>
</ol>
<p>参考值:</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>对应内容</th>
</tr>
</thead>
<tbody><tr>
<td>Passphrase</td>
<td>服务器的密码</td>
</tr>
<tr>
<td>Path to key</td>
<td>连接远程服务器密钥文件的路径</td>
</tr>
<tr>
<td>Key</td>
<td>SSH Key (具体内容看下面注意项)</td>
</tr>
<tr>
<td>Name</td>
<td>自定义服务器名</td>
</tr>
<tr>
<td>HostName</td>
<td>服务器IP地址</td>
</tr>
<tr>
<td>UserName</td>
<td>服务器用户名</td>
</tr>
<tr>
<td>Remote Directory</td>
<td>传输文件的目录</td>
</tr>
</tbody></table>
<p>注意项:</p>
<ol>
<li><p>如果找不到Publish over SSH,说明该插件未安装,请参考汉化步骤自行安装</p>
</li>
<li><p>登录方式:</p>
<ul>
<li>如果是用户名密码登录,输入Passphrase即可</li>
<li>如果是SSH秘钥登录则输入Path to Key以及Key</li>
</ul>
</li>
<li><p>Key在~/.ssh/id_rsa.pub文件里,若无此文件则命令行输入<strong>ssh-keygen</strong>,然后一路回车自动生成(Windows系统还请自行百度)</p>
</li>
<li><p>Remote Directory是你打包后的项目(jar包/war包)存放的地方,请先记住后续需要使用</p>
</li>
<li><p>右下角有个Test Configuration可以点一下看看有没有Success</p>
</li>
</ol>
<hr>
<h1 id="3-守护程序员的笑容—自动化集成部署-来了来了-他来了"><a href="#3-守护程序员的笑容—自动化集成部署-来了来了-他来了" class="headerlink" title="3. 守护程序员的笑容—自动化集成部署(来了来了,他来了)"></a>3. 守护程序员的笑容—自动化集成部署(来了来了,他来了)</h1><h2 id="3-1-项目构建"><a href="#3-1-项目构建" class="headerlink" title="3.1 项目构建"></a>3.1 项目构建</h2><p>以构建maven项目为例,构建步骤如下:</p>
<ol>
<li><p>新建任务<br> <img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7m1759j307z09nt96.jpg" alt="yPMZK1.png"></p>
</li>
<li><p>构建maven项目<br><a href="https://imgchr.com/i/ySdOpT"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7pry4uj30lm0f4wg8.jpg" alt="ySdOpT.png"></a></p>
</li>
<li><p>源码管理配置(选择github上的项目)</p>
<p>  <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7tw5j3uj30if0i9wfp.jpg" alt="yVX5JP.png"></p>
<p> <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7ub1e8vj30d9092jrn.jpg" alt="yVbyH1.png"></p>
</li>
<li><p>触发器配置(github稍后会配置)<br> <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7tgo8agj31020j177a.jpg">    </p>
</li>
<li><p>构建后操作</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7unh2zbj30ze0ijdit.jpg" alt="yVbyH1.png"></p>
</li>
</ol>
<h2 id="3-2-github配置"><a href="#3-2-github配置" class="headerlink" title="3.2. github配置"></a>3.2. github配置</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7v0p9exj30o70l3n0a.jpg" alt="yVxkP1.png"></p>
<h2 id="3-3-服务器添加脚本"><a href="#3-3-服务器添加脚本" class="headerlink" title="3.3 服务器添加脚本"></a>3.3 服务器添加脚本</h2><p>进入到2.4配置的Remote Directory里,创建两个脚本(请根据自己的情况修改脚本)</p>
<p>stop.sh:</p>
<pre><code>#!/bin/bash
pid=ps -ef |grep springboot-demo-0.0.1-SNAPSHOT.jar|awk &#39;&#123;print $2&#125;&#39;
if [ -n &quot;$pid&quot; ]
then
kill -9 $pid
fi
</code></pre>
<p>start.sh:</p>
<pre><code>#!/bin/bash
chmod 777 /usr/local/java-projects/springboot-demo-0.0.1-SNAPSHOT.jar
cd /usr/local/java-projects
nohup java -jar springboot-demo-0.0.1-SNAPSHOT.jar &amp;
</code></pre>
<h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4  测试"></a>3.4  测试</h2><ol>
<li>编写一个HelloController</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="meta">@RestController</span></span><br><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">		    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">		    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">		        <span class="keyword">return</span> <span class="string">&quot;Hello World!!!!!!!!!!!!&quot;</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>push项目</li>
<li>jenkins开始自动部署项目<img src="https://s3.ax1x.com/2021/02/01/yZPeMt.png"/>


</li>
</ol>
<ol start="4">
<li>点击进项目,可查看控制台<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7ozkpqj30wb0e0ae4.jpg" alt="在这里插入图片描述"></li>
</ol>
<ol start="5">
<li>访问项目路径 <a href="http://beanchan.cn/hello">http://beanchan.cn/hello</a> (我的,给你偷偷看一眼)</li>
</ol>
<hr>
<p>&emsp;&emsp;至此我的处女作也算是小小的完结了,内容也只是入门,后续部分会慢慢完善,在哪里如有存在着问题,或者这篇哪里还可以改进的,又或者你在通篇按照我的指示完成后还是无法正常使用欢迎与我探讨探讨,感谢你的观看。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
</search>
