<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jenkins入门教程</title>
    <url>/2021/02/02/Jenkins%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-什么是Jenkins"><a href="#1-什么是Jenkins" class="headerlink" title="1. 什么是Jenkins"></a>1. 什么是Jenkins</h1><h2 id="1-1-我们为啥需要jenkins"><a href="#1-1-我们为啥需要jenkins" class="headerlink" title="1.1 我们为啥需要jenkins"></a>1.1 我们为啥需要jenkins</h2><p>在一次系统开发中,往往需要如下几步:</p>
<ol>
<li>写代码</li>
<li>代码提交</li>
<li>四处打听有没有人没提交代码</li>
<li>项目打包(通常是jar包和war包)</li>
<li>上传到Linux服务器上</li>
<li>如果项目正在运行,关闭它</li>
<li>启动刚刚部署的项目</li>
<li>如果有人突然举手说我代码好像有点问题!重复步骤1-7,可以说是相等的折磨人了</li>
</ol>
<p>这时有人就会问了,<strong>有没有那种可以自动打包部署的工具呢</strong>?</p>
<p><a href="https://imgchr.com/i/sz9gQ1"><img src="https://img-blog.csdnimg.cn/img_convert/80ef6c5703529b4af9c1ab9dc92f150a.png" alt="sz9gQ1.jpg"></a></p>
<blockquote>
<p>正确答案:<strong>Jenkins</strong></p>
</blockquote>
<p>Jenkins是一个基于Java构筑的一个<strong>持续集成</strong>工具,可以帮助用户更好地实现持续集成</p>
<a id="more"></a>

<h2 id="1-2-Jenkin实现原理"><a href="#1-2-Jenkin实现原理" class="headerlink" title="1.2. Jenkin实现原理"></a>1.2. Jenkin实现原理</h2><ol>
<li><p>程序员们提交代码</p>
</li>
<li><p>版本控制服务器(git、svm)整合代码库</p>
</li>
<li><p>版本控制服务器通知Jenkins自动化部署</p>
</li>
<li><p>Jenkins调用git/svn插件获取源码</p>
</li>
<li><p>Jenkins调用maven插件打包成war包或者是jar包</p>
</li>
<li><p>Jenkins调用命令将项目部署到服务器</p>
</li>
<li><p>使用人员:测试/前端</p>
</li>
</ol>
<hr>
<h1 id="2-Jenkins搭建"><a href="#2-Jenkins搭建" class="headerlink" title="2. Jenkins搭建"></a>2. Jenkins搭建</h1><h2 id="2-1-Jenkins环境搭建-以CentOS7-5为例"><a href="#2-1-Jenkins环境搭建-以CentOS7-5为例" class="headerlink" title="2.1. Jenkins环境搭建(以CentOS7.5为例)"></a>2.1. Jenkins环境搭建(以CentOS7.5为例)</h2><ol>
<li>jdk</li>
<li>maven/gradle</li>
<li>git/svm</li>
</ol>
<p>以上为部署java项目的基本环境,请先行搭建好</p>
<h2 id="2-2-安装Jenkins"><a href="#2-2-安装Jenkins" class="headerlink" title="2.2. 安装Jenkins"></a>2.2. 安装Jenkins</h2><ol>
<li>安装包下载,Jenkins官网下载较慢,这里提供国内下载地址:<a href="https://mirrors.aliyun.com/jenkins/war/latest/jenkins.war">Jenkins</a></li>
<li>在安装包根路径下输入:  </li>
</ol>
<ul>
<li><strong>nohup java -jar -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true  jenkins.war –httpPort=8080 &amp;</strong> <ul>
<li>nohup …………. &amp; 后台启动</li>
<li>Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true 为了关闭CSRF,Jenkins2.2版本之后无法关闭CSRF,会导致项目拉取失败</li>
<li>jenkins.war 下载下来的war包</li>
<li>–httpPort=8080 指定jenkins管理页面的端口</li>
</ul>
</li>
</ul>
<ol start="3">
<li>安装结束后会有一个很长的初始密码,如果忘了可以在~/.jenkins/secrets/initialAdminPassword文件中查看</li>
<li>在浏览器输入 <a href="http://localhost:8080/">http://localhost:8080</a></li>
<li>输入密码后,建议点击安装推荐的插件,保证基本功能可用</li>
<li>安装完成后设置首个管理员用户和密码</li>
</ol>
<h2 id="2-3-Jenkins初始化配置"><a href="#2-3-Jenkins初始化配置" class="headerlink" title="2.3. Jenkins初始化配置"></a>2.3. Jenkins初始化配置</h2><h3 id="2-3-1-汉化插件-可选"><a href="#2-3-1-汉化插件-可选" class="headerlink" title="2.3.1. 汉化插件(可选)"></a>2.3.1. 汉化插件(可选)</h3><p>Linux安装完成后,第一次打开发现内部全都是英文的    <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7mh7zrqj31ov0u0tcf.jpg" alt="yVxkP1.png"></p>
<p>汉化步骤:</p>
<ol>
<li><p>点击Manage Jenkins</p>
</li>
<li><p>点击Mange Plugins</p>
</li>
<li><p>点击Advanced,设置Update Sites的URL为:<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a> 用国内镜像源安装插件速度会很快</p>
</li>
<li><p>插件安装(新老版本二选一) </p>
<ul>
<li><p>老版的安装<strong>Locale</strong>插件,随后依次点击Manage Jenkins -&gt; Configure System,找到Locale输入<strong>zh_CN</strong>,并在下面打钩</p>
</li>
<li><p>新版的安装Localization:Chinese(Simplified)插件即可(笔者自用,Jenkins版本2.277)</p>
</li>
</ul>
</li>
<li><p>拉到最下方点击save</p>
</li>
<li><p>重启( 推荐方式: <a href="http://localhost:8080/restart">http://localhost:8080/restart</a> )真的很省事</p>
</li>
</ol>
<h3 id="2-3-2-全局工具配置-系统管理底下"><a href="#2-3-2-全局工具配置-系统管理底下" class="headerlink" title="2.3.2. 全局工具配置(系统管理底下)"></a>2.3.2. 全局工具配置(系统管理底下)</h3><p>JDK、Git、Maven配置:</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7rj9camj31180g6405.jpg" alt="y9nACn.png"></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7o1qpej30o018ktb0.jpg" alt="ypAMdI.png"><br>注意项: </p>
<ol>
<li>如果没有git的配置项,先在插件里安装一下git插件,具体安装方式参照上面汉化步骤</li>
<li>是否自动安装自行考虑,网上看别人的建议是用自己的(自己的才是最好的)</li>
<li>记得拉到最底下点保存</li>
<li>换上你<strong>自己</strong>的目录配置项</li>
<li>记得把Maven的settings.xml里的mrror换成阿里源</li>
<li>上图git记得配置成git<strong>可执行文件</strong>的全路径</li>
</ol>
<h3 id="2-3-3-安装远程服务器插件以及其余插件"><a href="#2-3-3-安装远程服务器插件以及其余插件" class="headerlink" title="2.3.3. 安装远程服务器插件以及其余插件"></a>2.3.3. 安装远程服务器插件以及其余插件</h3><p>一共需要安装三个插件(安装步骤参考上面汉化步骤):</p>
<ol>
<li>Publish Over SSH 用于连接远程服务器</li>
<li>Deploy to container 用于把打包的应用发布到远程服务器</li>
<li>Maven Integration 用于构建Maven项目</li>
</ol>
<h2 id="2-4-配置连接远程服务器的SSH"><a href="#2-4-配置连接远程服务器的SSH" class="headerlink" title="2.4. 配置连接远程服务器的SSH"></a>2.4. 配置连接远程服务器的SSH</h2><ol>
<li>依次点击 系统管理 -&gt; 系统配置</li>
<li>拉到最底下找到Publish over SSH,参考下图填写完毕<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7kjjz6j30dk0mxaaz.jpg" alt="在这里插入图片描述"></li>
</ol>
<p>参考值:</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>对应内容</th>
</tr>
</thead>
<tbody><tr>
<td>Passphrase</td>
<td>服务器的密码</td>
</tr>
<tr>
<td>Path to key</td>
<td>连接远程服务器密钥文件的路径</td>
</tr>
<tr>
<td>Key</td>
<td>SSH Key (具体内容看下面注意项)</td>
</tr>
<tr>
<td>Name</td>
<td>自定义服务器名</td>
</tr>
<tr>
<td>HostName</td>
<td>服务器IP地址</td>
</tr>
<tr>
<td>UserName</td>
<td>服务器用户名</td>
</tr>
<tr>
<td>Remote Directory</td>
<td>传输文件的目录</td>
</tr>
</tbody></table>
<p>注意项:</p>
<ol>
<li><p>如果找不到Publish over SSH,说明该插件未安装,请参考汉化步骤自行安装</p>
</li>
<li><p>登录方式:</p>
<ul>
<li>如果是用户名密码登录,输入Passphrase即可</li>
<li>如果是SSH秘钥登录则输入Path to Key以及Key</li>
</ul>
</li>
<li><p>Key在~/.ssh/id_rsa.pub文件里,若无此文件则命令行输入<strong>ssh-keygen</strong>,然后一路回车自动生成(Windows系统还请自行百度)</p>
</li>
<li><p>Remote Directory是你打包后的项目(jar包/war包)存放的地方,请先记住后续需要使用</p>
</li>
<li><p>右下角有个Test Configuration可以点一下看看有没有Success</p>
</li>
</ol>
<hr>
<h1 id="3-守护程序员的笑容—自动化集成部署-来了来了-他来了"><a href="#3-守护程序员的笑容—自动化集成部署-来了来了-他来了" class="headerlink" title="3. 守护程序员的笑容—自动化集成部署(来了来了,他来了)"></a>3. 守护程序员的笑容—自动化集成部署(来了来了,他来了)</h1><h2 id="3-1-项目构建"><a href="#3-1-项目构建" class="headerlink" title="3.1 项目构建"></a>3.1 项目构建</h2><p>以构建maven项目为例,构建步骤如下:</p>
<ol>
<li><p>新建任务<br> <img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7m1759j307z09nt96.jpg" alt="yPMZK1.png"></p>
</li>
<li><p>构建maven项目<br><a href="https://imgchr.com/i/ySdOpT"><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7pry4uj30lm0f4wg8.jpg" alt="ySdOpT.png"></a></p>
</li>
<li><p>源码管理配置(选择github上的项目)</p>
<p>  <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7tw5j3uj30if0i9wfp.jpg" alt="yVX5JP.png"></p>
<p> <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7ub1e8vj30d9092jrn.jpg" alt="yVbyH1.png"></p>
</li>
<li><p>触发器配置(github稍后会配置)<br> <img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7tgo8agj31020j177a.jpg">    </p>
</li>
<li><p>构建后操作</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7unh2zbj30ze0ijdit.jpg" alt="yVbyH1.png"></p>
</li>
</ol>
<h2 id="3-2-github配置"><a href="#3-2-github配置" class="headerlink" title="3.2. github配置"></a>3.2. github配置</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnb7v0p9exj30o70l3n0a.jpg" alt="yVxkP1.png"></p>
<h2 id="3-3-服务器添加脚本"><a href="#3-3-服务器添加脚本" class="headerlink" title="3.3 服务器添加脚本"></a>3.3 服务器添加脚本</h2><p>进入到2.4配置的Remote Directory里,创建两个脚本(请根据自己的情况修改脚本)</p>
<p>stop.sh:</p>
<pre><code>#!/bin/bash
pid=ps -ef |grep springboot-demo-0.0.1-SNAPSHOT.jar|awk &#39;&#123;print $2&#125;&#39;
if [ -n &quot;$pid&quot; ]
then
kill -9 $pid
fi
</code></pre>
<p>start.sh:</p>
<pre><code>#!/bin/bash
chmod 777 /usr/local/java-projects/springboot-demo-0.0.1-SNAPSHOT.jar
cd /usr/local/java-projects
nohup java -jar springboot-demo-0.0.1-SNAPSHOT.jar &amp;
</code></pre>
<h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4  测试"></a>3.4  测试</h2><ol>
<li>编写一个HelloController</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="meta">@RestController</span></span><br><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">		    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">		    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">		        <span class="keyword">return</span> <span class="string">&quot;Hello World!!!!!!!!!!!!&quot;</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>push项目</li>
<li>jenkins开始自动部署项目<img src="https://s3.ax1x.com/2021/02/01/yZPeMt.png"/>


</li>
</ol>
<ol start="4">
<li>点击进项目,可查看控制台<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn9c7ozkpqj30wb0e0ae4.jpg" alt="在这里插入图片描述"></li>
</ol>
<ol start="5">
<li>访问项目路径 <a href="http://beanchan.cn/hello">http://beanchan.cn/hello</a> (我的,给你偷偷看一眼)</li>
</ol>
<hr>
<p>&emsp;&emsp;至此我的处女作也算是小小的完结了,内容也只是入门,后续部分会慢慢完善,在哪里如有存在着问题,或者这篇哪里还可以改进的,又或者你在通篇按照我的指示完成后还是无法正常使用欢迎与我探讨探讨,感谢你的观看。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>运维</tag>
      </tags>
  </entry>
</search>
